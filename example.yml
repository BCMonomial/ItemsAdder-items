# 这是一个用于介绍 ItemsAdder 的配置文件格式和写法的示例文件

# namespace 定义了整个文件中所有物品的命名空间，整个文件中的所有物品都将属于这个命名空间
info:
  namespace: chinesestyle  

# item 下用于定义物品
# 通常来说不需要修改物品定义
items: 
  bamboo_slips: # <----- 这是物品的 ID，配方需要和这个 ID 相对应。
    display_name: "竹简"
    permission: ia.furniture.chinesestyle
    resource:
      material: "PAPER"
      generate: false
      model_path: "furniture/bamboo_slips"
    behaviours:
      furniture:
        entity: item_frame
        fixed_rotation: false
        solid: false
        small: false
        placeable_on:
          walls: false
          ceiling: false
          floor: true
  blue_brick: # <----- 这是物品的 ID，配方需要和这个 ID 相对应。
    display_name: "青砖"
    permission: ia.furniture.chinesestyle
    resource:
      material: "PAPER"
      generate: false
      model_path: "furniture/blue_brick"
    specific_properties:
      block:
        hardness: 2
        placed_model:
          type: REAL_NOTE
          break_particles: ITEM
          rotx: 0
          roty: 0
        sound:
          break:
            name: BLOCK_STONE_BREAK
            volume: 1
            pitch: 1.0
          place:
            name: BLOCK_STONE_PLACE
            volume: 1
            pitch: 1.0

# recipes 下用于定义配方，物品和配方是分开定义的
# 如果文件中没有 recipes，你可以手动新开一栏
# 配方也可以新开一个文件，但我们不建议这样做
recipes:
  crafting_table: # 所有需要合成的配方都在 crafting_table 下
    bamboo_slips: # 配方 ID，这个 ID 不需要和物品的 ID 完全一致，但应当是唯一的，建议使用相同的 ID 以便识别
      enabled: true # 是否允许使用这个配方
      pattern: # 配方的图案
        - XXX 
        - BBB
        - SSS
      ingredients: # 配方的材料
        S: STRING
        B: BAMBOO
        # 这里并没有定义 X 是什么，这意味着 X 是空气
      result: # 合成结果
        item: chinesestyle:bamboo_slips # 命名空间:物品 ID
        amount: 1
  
  cooking: # 所有需要烧炼的配方都在 cooking 下
    blue_brick:
      enabled: true
      ingredient: # 烧炼原料
        item: BRICKS 
      machines: # 烧炼可用的机制，熔炉/高炉/烟熏炉
      - FURNACE 
      exp: 3 # 烧炼后给予的经验
      cook_time: 200 # 烧炼时长
      result: # 烧炼结果
        item: chinesestyle:blue_brick
        amount: 1
